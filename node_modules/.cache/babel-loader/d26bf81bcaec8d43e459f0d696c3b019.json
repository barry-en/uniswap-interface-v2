{"ast":null,"code":"import _slicedToArray from\"/Users/barry.liu/go/src/uniswap/uniswap-interface-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Users/barry.liu/go/src/uniswap/uniswap-interface-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import useENS from'../../hooks/useENS';import{Version}from'../../hooks/useToggledVersion';import{parseUnits}from'@ethersproject/units';import{CurrencyAmount,ETHER,JSBI,Token,TokenAmount}from'@uniswap/sdk';import{useCallback,useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import{useV1Trade}from'../../data/V1';import{useActiveWeb3React}from'../../hooks';import{useCurrency}from'../../hooks/Tokens';import{useTradeExactIn,useTradeExactOut}from'../../hooks/Trades';import useParsedQueryString from'../../hooks/useParsedQueryString';import{isAddress}from'../../utils';import{useCurrencyBalances}from'../wallet/hooks';import{Field,replaceSwapState,selectCurrency,setRecipient,switchCurrencies,typeInput}from'./actions';import useToggledVersion from'../../hooks/useToggledVersion';import{useUserSlippageTolerance}from'../user/hooks';import{computeSlippageAdjustedAmounts}from'../../utils/prices';export function useSwapState(){return useSelector(function(state){return state.swap;});}export function useSwapActionHandlers(){var dispatch=useDispatch();var onCurrencySelection=useCallback(function(field,currency){dispatch(selectCurrency({field:field,currencyId:currency instanceof Token?currency.address:currency===ETHER?'ETH':''}));},[dispatch]);var onSwitchTokens=useCallback(function(){dispatch(switchCurrencies());},[dispatch]);var onUserInput=useCallback(function(field,typedValue){dispatch(typeInput({field:field,typedValue:typedValue}));},[dispatch]);var onChangeRecipient=useCallback(function(recipient){dispatch(setRecipient({recipient:recipient}));},[dispatch]);return{onSwitchTokens:onSwitchTokens,onCurrencySelection:onCurrencySelection,onUserInput:onUserInput,onChangeRecipient:onChangeRecipient};}// try to parse a user entered amount for a given token\nexport function tryParseAmount(value,currency){if(!value||!currency){return;}try{var typedValueParsed=parseUnits(value,currency.decimals).toString();if(typedValueParsed!=='0'){return currency instanceof Token?new TokenAmount(currency,JSBI.BigInt(typedValueParsed)):CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));}}catch(error){// should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\nconsole.debug(\"Failed to parse input amount: \\\"\".concat(value,\"\\\"\"),error);}// necessary for all paths to return a value\nreturn;}// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(){var _ref,_ref2,_currencyBalances,_currencies;var _useActiveWeb3React=useActiveWeb3React(),account=_useActiveWeb3React.account;var toggledVersion=useToggledVersion();var _useSwapState=useSwapState(),independentField=_useSwapState.independentField,typedValue=_useSwapState.typedValue,inputCurrencyId=_useSwapState[Field.INPUT].currencyId,outputCurrencyId=_useSwapState[Field.OUTPUT].currencyId,recipient=_useSwapState.recipient;var inputCurrency=useCurrency(inputCurrencyId);var outputCurrency=useCurrency(outputCurrencyId);var recipientLookup=useENS(recipient!==null&&recipient!==void 0?recipient:undefined);var to=(_ref=recipient===null?account:recipientLookup.address)!==null&&_ref!==void 0?_ref:null;var relevantTokenBalances=useCurrencyBalances(account!==null&&account!==void 0?account:undefined,[inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined]);var isExactIn=independentField===Field.INPUT;var parsedAmount=tryParseAmount(typedValue,(_ref2=isExactIn?inputCurrency:outputCurrency)!==null&&_ref2!==void 0?_ref2:undefined);var bestTradeExactIn=useTradeExactIn(isExactIn?parsedAmount:undefined,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined);var bestTradeExactOut=useTradeExactOut(inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,!isExactIn?parsedAmount:undefined);var v2Trade=isExactIn?bestTradeExactIn:bestTradeExactOut;var currencyBalances=(_currencyBalances={},_defineProperty(_currencyBalances,Field.INPUT,relevantTokenBalances[0]),_defineProperty(_currencyBalances,Field.OUTPUT,relevantTokenBalances[1]),_currencyBalances);var currencies=(_currencies={},_defineProperty(_currencies,Field.INPUT,inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined),_defineProperty(_currencies,Field.OUTPUT,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined),_currencies);// get link to trade on v1, if a better rate exists\nvar v1Trade=useV1Trade(isExactIn,currencies[Field.INPUT],currencies[Field.OUTPUT],parsedAmount);var inputError;if(!account){inputError='Connect Wallet';}if(!parsedAmount){var _inputError;inputError=(_inputError=inputError)!==null&&_inputError!==void 0?_inputError:'Enter an amount';}if(!currencies[Field.INPUT]||!currencies[Field.OUTPUT]){var _inputError2;inputError=(_inputError2=inputError)!==null&&_inputError2!==void 0?_inputError2:'Select a token';}if(!to){var _inputError3;inputError=(_inputError3=inputError)!==null&&_inputError3!==void 0?_inputError3:'Enter a recipient';}var _useUserSlippageToler=useUserSlippageTolerance(),_useUserSlippageToler2=_slicedToArray(_useUserSlippageToler,1),allowedSlippage=_useUserSlippageToler2[0];var slippageAdjustedAmounts=v2Trade&&allowedSlippage&&computeSlippageAdjustedAmounts(v2Trade,allowedSlippage);var slippageAdjustedAmountsV1=v1Trade&&allowedSlippage&&computeSlippageAdjustedAmounts(v1Trade,allowedSlippage);// compare input balance to max input based on version\nvar _ref3=[currencyBalances[Field.INPUT],toggledVersion===Version.v1?slippageAdjustedAmountsV1?slippageAdjustedAmountsV1[Field.INPUT]:null:slippageAdjustedAmounts?slippageAdjustedAmounts[Field.INPUT]:null],balanceIn=_ref3[0],amountIn=_ref3[1];if(balanceIn&&amountIn&&balanceIn.lessThan(amountIn)){inputError='Insufficient '+amountIn.currency.symbol+' balance';}return{currencies:currencies,currencyBalances:currencyBalances,parsedAmount:parsedAmount,v2Trade:v2Trade!==null&&v2Trade!==void 0?v2Trade:undefined,inputError:inputError,v1Trade:v1Trade};}function parseCurrencyFromURLParameter(urlParam){var _ETH;if(typeof urlParam==='string'){var valid=isAddress(urlParam);if(valid)return valid;if(urlParam.toUpperCase()==='ETH')return'ETH';if(valid===false)return'ETH';}return(_ETH='ETH')!==null&&_ETH!==void 0?_ETH:'';}function parseTokenAmountURLParameter(urlParam){return typeof urlParam==='string'&&!isNaN(parseFloat(urlParam))?urlParam:'';}function parseIndependentFieldURLParameter(urlParam){return typeof urlParam==='string'&&urlParam.toLowerCase()==='output'?Field.OUTPUT:Field.INPUT;}var ENS_NAME_REGEX=/^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;var ADDRESS_REGEX=/^0x[a-fA-F0-9]{40}$/;function validatedRecipient(recipient){if(typeof recipient!=='string')return null;var address=isAddress(recipient);if(address)return address;if(ENS_NAME_REGEX.test(recipient))return recipient;if(ADDRESS_REGEX.test(recipient))return recipient;return null;}export function queryParametersToSwapState(parsedQs){var _ref4;var inputCurrency=parseCurrencyFromURLParameter(parsedQs.inputCurrency);var outputCurrency=parseCurrencyFromURLParameter(parsedQs.outputCurrency);if(inputCurrency===outputCurrency){if(typeof parsedQs.outputCurrency==='string'){inputCurrency='';}else{outputCurrency='';}}var recipient=validatedRecipient(parsedQs.recipient);return _ref4={},_defineProperty(_ref4,Field.INPUT,{currencyId:inputCurrency}),_defineProperty(_ref4,Field.OUTPUT,{currencyId:outputCurrency}),_defineProperty(_ref4,\"typedValue\",parseTokenAmountURLParameter(parsedQs.exactAmount)),_defineProperty(_ref4,\"independentField\",parseIndependentFieldURLParameter(parsedQs.exactField)),_defineProperty(_ref4,\"recipient\",recipient),_ref4;}// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch(){var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var dispatch=useDispatch();var parsedQs=useParsedQueryString();useEffect(function(){if(!chainId)return;var parsed=queryParametersToSwapState(parsedQs);dispatch(replaceSwapState({typedValue:parsed.typedValue,field:parsed.independentField,inputCurrencyId:parsed[Field.INPUT].currencyId,outputCurrencyId:parsed[Field.OUTPUT].currencyId,recipient:parsed.recipient}));// eslint-disable-next-line react-hooks/exhaustive-deps\n},[dispatch,chainId]);}","map":{"version":3,"sources":["/Users/barry.liu/go/src/uniswap/uniswap-interface-v2/src/state/swap/hooks.ts"],"names":["useENS","Version","parseUnits","CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useCallback","useEffect","useDispatch","useSelector","useV1Trade","useActiveWeb3React","useCurrency","useTradeExactIn","useTradeExactOut","useParsedQueryString","isAddress","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useToggledVersion","useUserSlippageTolerance","computeSlippageAdjustedAmounts","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","typedValueParsed","decimals","toString","BigInt","ether","error","console","debug","useDerivedSwapInfo","account","toggledVersion","independentField","inputCurrencyId","INPUT","outputCurrencyId","OUTPUT","inputCurrency","outputCurrency","recipientLookup","undefined","to","relevantTokenBalances","isExactIn","parsedAmount","bestTradeExactIn","bestTradeExactOut","v2Trade","currencyBalances","currencies","v1Trade","inputError","allowedSlippage","slippageAdjustedAmounts","slippageAdjustedAmountsV1","v1","balanceIn","amountIn","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","chainId","parsed"],"mappings":"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","sourcesContent":["import useENS from '../../hooks/useENS'\nimport { Version } from '../../hooks/useToggledVersion'\nimport { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from '@uniswap/sdk'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useV1Trade } from '../../data/V1'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport { isAddress } from '../../utils'\nimport { AppDispatch, AppState } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\nimport useToggledVersion from '../../hooks/useToggledVersion'\nimport { useUserSlippageTolerance } from '../user/hooks'\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices'\n\nexport function useSwapState(): AppState['swap'] {\n  return useSelector<AppState, AppState['swap']>(state => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'ETH' : ''\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmount: CurrencyAmount | undefined\n  v2Trade: Trade | undefined\n  inputError?: string\n  v1Trade: Trade | undefined\n} {\n  const { account } = useActiveWeb3React()\n\n  const toggledVersion = useToggledVersion()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined\n  }\n\n  // get link to trade on v1, if a better rate exists\n  const v1Trade = useV1Trade(isExactIn, currencies[Field.INPUT], currencies[Field.OUTPUT], parsedAmount)\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = 'Connect Wallet'\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? 'Enter an amount'\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? 'Select a token'\n  }\n\n  if (!to) {\n    inputError = inputError ?? 'Enter a recipient'\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\n\n  const slippageAdjustedAmountsV1 =\n    v1Trade && allowedSlippage && computeSlippageAdjustedAmounts(v1Trade, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    toggledVersion === Version.v1\n      ? slippageAdjustedAmountsV1\n        ? slippageAdjustedAmountsV1[Field.INPUT]\n        : null\n      : slippageAdjustedAmounts\n      ? slippageAdjustedAmounts[Field.INPUT]\n      : null\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance'\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError,\n    v1Trade\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH'\n    if (valid === false) return 'ETH'\n  }\n  return 'ETH' ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch() {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient\n      })\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n}\n"]},"metadata":{},"sourceType":"module"}