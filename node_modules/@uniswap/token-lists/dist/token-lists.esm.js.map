{"version":3,"file":"token-lists.esm.js","sources":["../src/getVersionUpgrade.ts","../src/isVersionUpdate.ts","../src/diffTokenLists.ts","../src/minVersionBump.ts","../src/nextVersion.ts"],"sourcesContent":["/**\n * Enum describing types of version differences\n */\nimport { Version } from './types';\n\nexport enum VersionUpgrade {\n  NONE,\n  PATCH,\n  MINOR,\n  MAJOR,\n}\n\n/**\n * Return the upgrade type from the base version to the update version.\n * Note that downgrades and equivalent versions are both treated as `NONE`.\n * @param base base list\n * @param update update to the list\n */\nexport function getVersionUpgrade(\n  base: Version,\n  update: Version\n): VersionUpgrade {\n  if (update.major > base.major) {\n    return VersionUpgrade.MAJOR;\n  }\n  if (update.major < base.major) {\n    return VersionUpgrade.NONE;\n  }\n  if (update.minor > base.minor) {\n    return VersionUpgrade.MINOR;\n  }\n  if (update.minor < base.minor) {\n    return VersionUpgrade.NONE;\n  }\n  return update.patch > base.patch ? VersionUpgrade.PATCH : VersionUpgrade.NONE;\n}\n","import { getVersionUpgrade, VersionUpgrade } from './getVersionUpgrade';\nimport { Version } from './types';\n\n/**\n * Returns true if versionB is an update over versionA\n */\nexport function isVersionUpdate(base: Version, update: Version): boolean {\n  return getVersionUpgrade(base, update) !== VersionUpgrade.NONE;\n}\n","import { TokenInfo } from './types';\n\nexport type TokenInfoChangeKey = Exclude<\n  keyof TokenInfo,\n  'address' | 'chainId'\n>;\nexport type TokenInfoChanges = Array<TokenInfoChangeKey>;\n\n/**\n * compares two token info key values\n * this subset of full deep equal functionality does not work on objects or object arrays\n * @param a comparison item a\n * @param b comparison item b\n */\nfunction compareTokenInfoProperty(a: unknown, b: unknown): boolean {\n  if (a === b) return true;\n  if (typeof a !== typeof b) return false;\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.every((el, i) => b[i] === el);\n  }\n  return false;\n}\n\n/**\n * Differences between a base list and an updated list.\n */\nexport interface TokenListDiff {\n  /**\n   * Tokens from updated with chainId/address not present in base list\n   */\n  readonly added: TokenInfo[];\n  /**\n   * Tokens from base with chainId/address not present in the updated list\n   */\n  readonly removed: TokenInfo[];\n  /**\n   * The token info that changed\n   */\n  readonly changed: {\n    [chainId: number]: {\n      [address: string]: TokenInfoChanges;\n    };\n  };\n}\n\n/**\n * Computes the diff of a token list where the first argument is the base and the second argument is the updated list.\n * @param base base list\n * @param update updated list\n */\nexport function diffTokenLists(\n  base: TokenInfo[],\n  update: TokenInfo[]\n): TokenListDiff {\n  const indexedBase = base.reduce<{\n    [chainId: number]: { [address: string]: TokenInfo };\n  }>((memo, tokenInfo) => {\n    if (!memo[tokenInfo.chainId]) memo[tokenInfo.chainId] = {};\n    memo[tokenInfo.chainId][tokenInfo.address] = tokenInfo;\n    return memo;\n  }, {});\n\n  const newListUpdates = update.reduce<{\n    added: TokenInfo[];\n    changed: {\n      [chainId: number]: {\n        [address: string]: TokenInfoChanges;\n      };\n    };\n    index: {\n      [chainId: number]: {\n        [address: string]: true;\n      };\n    };\n  }>(\n    (memo, tokenInfo) => {\n      const baseToken = indexedBase[tokenInfo.chainId]?.[tokenInfo.address];\n      if (!baseToken) {\n        memo.added.push(tokenInfo);\n      } else {\n        const changes: TokenInfoChanges = Object.keys(tokenInfo)\n          .filter(\n            (s): s is TokenInfoChangeKey => s !== 'address' && s !== 'chainId'\n          )\n          .filter(s => {\n            return !compareTokenInfoProperty(tokenInfo[s], baseToken[s]);\n          });\n        if (changes.length > 0) {\n          if (!memo.changed[tokenInfo.chainId]) {\n            memo.changed[tokenInfo.chainId] = {};\n          }\n          memo.changed[tokenInfo.chainId][tokenInfo.address] = changes;\n        }\n      }\n\n      if (!memo.index[tokenInfo.chainId]) {\n        memo.index[tokenInfo.chainId] = {\n          [tokenInfo.address]: true,\n        };\n      } else {\n        memo.index[tokenInfo.chainId][tokenInfo.address] = true;\n      }\n\n      return memo;\n    },\n    { added: [], changed: {}, index: {} }\n  );\n\n  const removed = base.reduce<TokenInfo[]>((list, curr) => {\n    if (\n      !newListUpdates.index[curr.chainId] ||\n      !newListUpdates.index[curr.chainId][curr.address]\n    ) {\n      list.push(curr);\n    }\n    return list;\n  }, []);\n\n  return {\n    added: newListUpdates.added,\n    changed: newListUpdates.changed,\n    removed,\n  };\n}\n","import { diffTokenLists } from './diffTokenLists';\nimport { VersionUpgrade } from './getVersionUpgrade';\nimport { TokenInfo } from './types';\n\n/**\n * Returns the minimum version bump for the given list\n * @param baseList the base list of tokens\n * @param updatedList the updated list of tokens\n */\nexport function minVersionBump(\n  baseList: TokenInfo[],\n  updatedList: TokenInfo[]\n): VersionUpgrade {\n  const diff = diffTokenLists(baseList, updatedList);\n  if (diff.removed.length > 0) return VersionUpgrade.MAJOR;\n  if (diff.added.length > 0) return VersionUpgrade.MINOR;\n  if (Object.keys(diff.changed).length > 0) return VersionUpgrade.PATCH;\n  return VersionUpgrade.NONE;\n}\n","import { VersionUpgrade } from './getVersionUpgrade';\nimport { Version } from './types';\n\n/**\n * Returns the next version of the list given a base version and the upgrade type\n * @param base current version\n * @param bump the upgrade type\n */\nexport function nextVersion(base: Version, bump: VersionUpgrade): Version {\n  switch (bump) {\n    case VersionUpgrade.NONE:\n      return base;\n\n    case VersionUpgrade.MAJOR:\n      return { major: base.major + 1, minor: 0, patch: 0 };\n\n    case VersionUpgrade.MINOR:\n      return {\n        major: base.major,\n        minor: base.minor + 1,\n        patch: 0,\n      };\n\n    case VersionUpgrade.PATCH:\n      return {\n        major: base.major,\n        minor: base.minor,\n        patch: base.patch + 1,\n      };\n  }\n}\n"],"names":["VersionUpgrade","getVersionUpgrade","base","update","major","MAJOR","NONE","minor","MINOR","patch","PATCH","isVersionUpdate","compareTokenInfoProperty","a","b","Array","isArray","every","el","i","diffTokenLists","indexedBase","reduce","memo","tokenInfo","chainId","address","newListUpdates","baseToken","added","push","changes","Object","keys","filter","s","length","changed","index","removed","list","curr","minVersionBump","baseList","updatedList","diff","nextVersion","bump"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKYA,cAAZ;;AAAA,WAAYA;AACVA,EAAAA,0CAAA,SAAA;AACAA,EAAAA,2CAAA,UAAA;AACAA,EAAAA,2CAAA,UAAA;AACAA,EAAAA,2CAAA,UAAA;AACD,CALD,EAAYA,cAAc,KAAdA,cAAc,KAAA,CAA1B;AAOA;;;;;;;;AAMA,SAAgBC,kBACdC,MACAC;AAEA,MAAIA,MAAM,CAACC,KAAP,GAAeF,IAAI,CAACE,KAAxB,EAA+B;AAC7B,WAAOJ,cAAc,CAACK,KAAtB;AACD;;AACD,MAAIF,MAAM,CAACC,KAAP,GAAeF,IAAI,CAACE,KAAxB,EAA+B;AAC7B,WAAOJ,cAAc,CAACM,IAAtB;AACD;;AACD,MAAIH,MAAM,CAACI,KAAP,GAAeL,IAAI,CAACK,KAAxB,EAA+B;AAC7B,WAAOP,cAAc,CAACQ,KAAtB;AACD;;AACD,MAAIL,MAAM,CAACI,KAAP,GAAeL,IAAI,CAACK,KAAxB,EAA+B;AAC7B,WAAOP,cAAc,CAACM,IAAtB;AACD;;AACD,SAAOH,MAAM,CAACM,KAAP,GAAeP,IAAI,CAACO,KAApB,GAA4BT,cAAc,CAACU,KAA3C,GAAmDV,cAAc,CAACM,IAAzE;AACD;;AChCD;;;;AAGA,SAAgBK,gBAAgBT,MAAeC;AAC7C,SAAOF,iBAAiB,CAACC,IAAD,EAAOC,MAAP,CAAjB,KAAoCH,cAAc,CAACM,IAA1D;AACD;;ACAD;;;;;;AAMA,SAASM,wBAAT,CAAkCC,CAAlC,EAA8CC,CAA9C;AACE,MAAID,CAAC,KAAKC,CAAV,EAAa,OAAO,IAAP;AACb,MAAI,OAAOD,CAAP,KAAa,OAAOC,CAAxB,EAA2B,OAAO,KAAP;;AAC3B,MAAIC,KAAK,CAACC,OAAN,CAAcH,CAAd,KAAoBE,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAxB,EAA0C;AACxC,WAAOD,CAAC,CAACI,KAAF,CAAQ,UAACC,EAAD,EAAKC,CAAL;AAAA,aAAWL,CAAC,CAACK,CAAD,CAAD,KAASD,EAApB;AAAA,KAAR,CAAP;AACD;;AACD,SAAO,KAAP;AACD;AAwBD;;;;;;;AAKA,SAAgBE,eACdlB,MACAC;AAEA,MAAMkB,WAAW,GAAGnB,IAAI,CAACoB,MAAL,CAEjB,UAACC,IAAD,EAAOC,SAAP;AACD,QAAI,CAACD,IAAI,CAACC,SAAS,CAACC,OAAX,CAAT,EAA8BF,IAAI,CAACC,SAAS,CAACC,OAAX,CAAJ,GAA0B,EAA1B;AAC9BF,IAAAA,IAAI,CAACC,SAAS,CAACC,OAAX,CAAJ,CAAwBD,SAAS,CAACE,OAAlC,IAA6CF,SAA7C;AACA,WAAOD,IAAP;AACD,GANmB,EAMjB,EANiB,CAApB;AAQA,MAAMI,cAAc,GAAGxB,MAAM,CAACmB,MAAP,CAarB,UAACC,IAAD,EAAOC,SAAP;;;AACE,QAAMI,SAAS,4BAAGP,WAAW,CAACG,SAAS,CAACC,OAAX,CAAd,0DAAG,sBAAiCD,SAAS,CAACE,OAA3C,CAAlB;;AACA,QAAI,CAACE,SAAL,EAAgB;AACdL,MAAAA,IAAI,CAACM,KAAL,CAAWC,IAAX,CAAgBN,SAAhB;AACD,KAFD,MAEO;AACL,UAAMO,OAAO,GAAqBC,MAAM,CAACC,IAAP,CAAYT,SAAZ,EAC/BU,MAD+B,CAE9B,UAACC,CAAD;AAAA,eAAgCA,CAAC,KAAK,SAAN,IAAmBA,CAAC,KAAK,SAAzD;AAAA,OAF8B,EAI/BD,MAJ+B,CAIxB,UAAAC,CAAC;AACP,eAAO,CAACvB,wBAAwB,CAACY,SAAS,CAACW,CAAD,CAAV,EAAeP,SAAS,CAACO,CAAD,CAAxB,CAAhC;AACD,OAN+B,CAAlC;;AAOA,UAAIJ,OAAO,CAACK,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAI,CAACb,IAAI,CAACc,OAAL,CAAab,SAAS,CAACC,OAAvB,CAAL,EAAsC;AACpCF,UAAAA,IAAI,CAACc,OAAL,CAAab,SAAS,CAACC,OAAvB,IAAkC,EAAlC;AACD;;AACDF,QAAAA,IAAI,CAACc,OAAL,CAAab,SAAS,CAACC,OAAvB,EAAgCD,SAAS,CAACE,OAA1C,IAAqDK,OAArD;AACD;AACF;;AAED,QAAI,CAACR,IAAI,CAACe,KAAL,CAAWd,SAAS,CAACC,OAArB,CAAL,EAAoC;AAAA;;AAClCF,MAAAA,IAAI,CAACe,KAAL,CAAWd,SAAS,CAACC,OAArB,uDACGD,SAAS,CAACE,OADb,IACuB,IADvB;AAGD,KAJD,MAIO;AACLH,MAAAA,IAAI,CAACe,KAAL,CAAWd,SAAS,CAACC,OAArB,EAA8BD,SAAS,CAACE,OAAxC,IAAmD,IAAnD;AACD;;AAED,WAAOH,IAAP;AACD,GA1CoB,EA2CrB;AAAEM,IAAAA,KAAK,EAAE,EAAT;AAAaQ,IAAAA,OAAO,EAAE,EAAtB;AAA0BC,IAAAA,KAAK,EAAE;AAAjC,GA3CqB,CAAvB;AA8CA,MAAMC,OAAO,GAAGrC,IAAI,CAACoB,MAAL,CAAyB,UAACkB,IAAD,EAAOC,IAAP;AACvC,QACE,CAACd,cAAc,CAACW,KAAf,CAAqBG,IAAI,CAAChB,OAA1B,CAAD,IACA,CAACE,cAAc,CAACW,KAAf,CAAqBG,IAAI,CAAChB,OAA1B,EAAmCgB,IAAI,CAACf,OAAxC,CAFH,EAGE;AACAc,MAAAA,IAAI,CAACV,IAAL,CAAUW,IAAV;AACD;;AACD,WAAOD,IAAP;AACD,GARe,EAQb,EARa,CAAhB;AAUA,SAAO;AACLX,IAAAA,KAAK,EAAEF,cAAc,CAACE,KADjB;AAELQ,IAAAA,OAAO,EAAEV,cAAc,CAACU,OAFnB;AAGLE,IAAAA,OAAO,EAAPA;AAHK,GAAP;AAKD;;ACvHD;;;;;;AAKA,SAAgBG,eACdC,UACAC;AAEA,MAAMC,IAAI,GAAGzB,cAAc,CAACuB,QAAD,EAAWC,WAAX,CAA3B;AACA,MAAIC,IAAI,CAACN,OAAL,CAAaH,MAAb,GAAsB,CAA1B,EAA6B,OAAOpC,cAAc,CAACK,KAAtB;AAC7B,MAAIwC,IAAI,CAAChB,KAAL,CAAWO,MAAX,GAAoB,CAAxB,EAA2B,OAAOpC,cAAc,CAACQ,KAAtB;AAC3B,MAAIwB,MAAM,CAACC,IAAP,CAAYY,IAAI,CAACR,OAAjB,EAA0BD,MAA1B,GAAmC,CAAvC,EAA0C,OAAOpC,cAAc,CAACU,KAAtB;AAC1C,SAAOV,cAAc,CAACM,IAAtB;AACD;;ACfD;;;;;;AAKA,SAAgBwC,YAAY5C,MAAe6C;AACzC,UAAQA,IAAR;AACE,SAAK/C,cAAc,CAACM,IAApB;AACE,aAAOJ,IAAP;;AAEF,SAAKF,cAAc,CAACK,KAApB;AACE,aAAO;AAAED,QAAAA,KAAK,EAAEF,IAAI,CAACE,KAAL,GAAa,CAAtB;AAAyBG,QAAAA,KAAK,EAAE,CAAhC;AAAmCE,QAAAA,KAAK,EAAE;AAA1C,OAAP;;AAEF,SAAKT,cAAc,CAACQ,KAApB;AACE,aAAO;AACLJ,QAAAA,KAAK,EAAEF,IAAI,CAACE,KADP;AAELG,QAAAA,KAAK,EAAEL,IAAI,CAACK,KAAL,GAAa,CAFf;AAGLE,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAMF,SAAKT,cAAc,CAACU,KAApB;AACE,aAAO;AACLN,QAAAA,KAAK,EAAEF,IAAI,CAACE,KADP;AAELG,QAAAA,KAAK,EAAEL,IAAI,CAACK,KAFP;AAGLE,QAAAA,KAAK,EAAEP,IAAI,CAACO,KAAL,GAAa;AAHf,OAAP;AAfJ;AAqBD;;;;"}